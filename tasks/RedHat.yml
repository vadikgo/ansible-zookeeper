---
- name: Install OS Packages
  yum: name={{ item }} state=present
  with_items:
    - libselinux-python
    - nc

- group: name=zookeeper system=yes
- user: name=zookeeper group=zookeeper system=yes

- name: Download and unpack zookeeper
  unarchive:
    src: "{{zookeeper_url}}"
    dest: "{{zookeeper_base_dir}}"
    copy: "{{zookeeper_url | match('https*://.*') | ternary(False, True)}}"
    owner: zookeeper
    group: zookeeper
    creates: "{{zookeeper_dir}}/bin"
  tags: bootstrap

- name: Create zookeeper data folder.
  file: path={{zookeeper_data_dir}} state=directory recurse=yes owner=zookeeper group=zookeeper
  tags: bootstrap

- name: Create zookeeper logs folder.
  file: path={{zookeeper_log_dir}} state=directory recurse=yes owner=zookeeper group=zookeeper
  tags: bootstrap

- block:
  - name: Check if /etc/init exists
    stat: path=/etc/init/
    register: etc_init

  - name: Upstart script.
    template: src=zookeeper.conf.j2 dest=/etc/init/zookeeper.conf
    when: etc_init.stat.exists == true
    tags: deploy
    notify:
      - Restart zookeeper

  - name: Check if systemd exists
    stat: path=/usr/lib/systemd/system/
    register: systemd_check

  - name: Systemd script.
    template: src=zookeeper.service.j2 dest=/usr/lib/systemd/system/zookeeper.service
    when: systemd_check.stat.exists == true
    tags: deploy
    notify:
      - Restart zookeeper
  when: ansible_connection != 'docker'

- name: Write myid file.
  template: src=myid.j2 dest={{zookeeper_data_dir}}/myid owner=zookeeper group=zookeeper
  tags: deploy
  notify:
    - Restart zookeeper

- name: Configure zookeeper
  template: src=zoo.cfg.j2 dest={{ zookeeper_dir }}/conf/zoo.cfg owner=zookeeper group=zookeeper
  tags: deploy
  notify:
    - Restart zookeeper

- name: Start zookeeper
  service: name=zookeeper state=started
  tags: deploy
  when: ansible_connection != 'docker'

- name: start zookeeper in docker
  become: yes
  become_user: zookeeper
  shell: "{{zookeeper_dir}}/bin/zkServer.sh start"
  args:
    chdir: "{{zookeeper_log_dir}}"
  when: ansible_connection == 'docker'

- name: wait for zookeeper port
  wait_for: port={{client_port}} state=started timeout={{ zookeeper_wait_for_period }}
  #when: deploy

- name: Is the ZK running in a non-error state
  shell: echo ruok | nc localhost {{client_port}}
  register: zk_ruok
  failed_when: zk_ruok.stdout.find('imok') == -1
